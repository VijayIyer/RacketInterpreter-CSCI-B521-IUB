;#lang racket
;(require "parenthec.rkt")


;; (let ((f (lambda (f)
;;   	      (lambda (n)
;; 	        (if (zero? n) 
;; 		    1
;; 	            (* n ((f f) (sub1 n))))))))
;;   (* (letcc k ((f f) (throw k ((f f) 4)))) 5))
 


#| Step 0 - beginning

(define value-of-cps
  (lambda (expr env k)
    (match expr
      [`(const ,expr) (apply-k k expr)]
      [`(mult ,x1 ,x2) (value-of-cps x1 env (outer-mult-k x2 env k))]
      [`(sub1 ,x) (value-of-cps x env (inner-sub1-k k))]
      [`(zero ,x) (value-of-cps x env (zero-continuation-k k))]
      [`(if ,test ,conseq ,alt) (value-of-cps test env (if-continuation-k conseq alt env k))]
      [`(letcc ,body) (value-of-cps body (extend-env k env k) k)]
      [`(throw ,k-exp ,v-exp) (value-of-cps v-exp env (throw-outer-k k-exp env))]
      [`(let ,e ,body) (value-of-cps e env (let-continuation-k body env k))]
      [`(var ,y) (apply-env env y k)]
      [`(lambda ,body) (apply-k k (make-closure body env))]
      [`(app ,rator ,rand) (value-of-cps rator env (application-outer-k rand env k))]
      )))

(define zero-continuation-k
  (lambda (k)
    `(zero-continuation ,k)
      ))

(define inner-mult-k
  (lambda (v2 k^)
    `(inner-mult-k ,v2 ,k^)
    ))

(define outer-mult-k
  (lambda (x2 env k)
    `(outer-mult-k ,x2 ,env ,k)
      ))

(define inner-sub1-k
  (lambda (k^)
    `(inner-sub1-k ,k^)
      ))

(define if-continuation-k
  (lambda (conseq alt env k)
      `(if-continuation-k ,conseq ,alt ,env ,k)
    ))

(define throw-inner-k
  (lambda (v2)
    `(throw-inner-k ,v2)))

(define throw-outer-k
  (lambda (k-exp env)
    `(throw-outer-k ,k-exp ,env)))

(define let-continuation-k
  (lambda (body env k^)
    `(let-continuation-k ,body ,env ,k^)
      ))

(define application-inner-k
  (lambda (v1 k^)
    `(application-inner-k ,v1 ,k^)
    ))

(define application-outer-k
  (lambda (rand env k^)
    `(application-outer-k ,rand ,env ,k^)
    ))

(define empty-env
  (lambda ()
    `(empty-env)))
 
(define empty-k
  (lambda ()
    `(empty-k)))

(define apply-k
  (lambda (k v)
    (match k
      [`(if-continuation-k ,conseq ,alt ,env ,k^) (if v
                                                      (value-of-cps conseq env k^)
                                                      (value-of-cps alt env k^))]
      [`(outer-mult-k ,x2 ,env ,k^) (value-of-cps x2 env
                                                 (inner-mult-k v k^))]
      [`(inner-mult-k ,v2 ,k^) (apply-k k^ (* v v2))]
      [`(zero-continuation ,k^) (apply-k k^ (zero? v))]
      [`(inner-sub1-k ,k^) (apply-k k^ (sub1 v))]
      [`(throw-outer-k ,k-exp ,env) (value-of-cps k-exp env (throw-inner-k v))]
      [`(throw-inner-k ,v2) (apply-k v v2)]
      [`(let-continuation-k ,body ,env ,k^) (let ([a v])
                                              (value-of-cps body (extend-env a env k^) k^))]
      [`(application-inner-k ,v1 ,k^) (apply-closure v1 v k^)]
      [`(application-outer-k ,rand ,env ,k^) (value-of-cps rand env (application-inner-k v k^))]
      [`(empty-k) v]
      )))

(define apply-env
  (lambda (env y k)
    (match env
      [`(extend-env ,arg^ ,env^ ,k^) (if (zero? y)
                                         (apply-k k arg^)
                                         (apply-env env^ (sub1 y) k))]
      [`(empty-env) (error 'value-of "unbound identifier")]
      [else (env y k)]
      )))

(define apply-closure
  (lambda (clos arg k)
    (match clos
      [`(make-closure ,body ,env) (value-of-cps body
                                                (extend-env arg env k) k)]
      )))

(define make-closure
  (lambda (body env)
    `(make-closure ,body ,env)
    ))

(define extend-env
  (lambda (arg^ env^ k^)
    `(extend-env ,arg^ ,env^ ,k^)
    ))

|#

; Step 5
#|
(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union kt
  (zero-continuation-k k)
  (inner-mult-k v2 k^)
  (outer-mult-k x2 env k)
  (inner-sub1-k k^)
  (if-continuation-k conseq alt env k)
  (throw-inner-k v2)
  (throw-outer-k k-exp env)
  (let-continuation-k body env k^)
  (application-inner-k v1 k^)
  (application-outer-k rand env k^)
  (empty-k)
  )
(define-union clos
  (make-closure body env)
  )
(define-union envr
  (empty-env)
  (extend-env arg^ env^ k^))


(define apply-k
  (lambda (*k* *v*)
    (union-case *k* kt
      [(if-continuation-k conseq alt env k^) (if *v*
                                                 (let* ((*k* k^)
                                                        (*v* *v*)
                                                        (*exp* conseq)
                                                        (*env* env))
                                                   (value-of-cps *exp* *env* *k*))
                                                 (let* ((*k* k^)
                                                        (*v* *v*)
                                                        (*exp* alt)
                                                        (*env* env))
                                                 (value-of-cps *exp* *env* *k*)))]
      [(outer-mult-k x2 env k^) (let* ((*k* (kt_inner-mult-k *v* k^))
                                       (*v* *v*)
                                       (*exp* x2)
                                       (*env* env))
                                  (value-of-cps *exp* *env* *k*))]
      [(inner-mult-k v2 k^) (let* ((*k* k^)
                                   (*v* (* *v* v2)))
                              (apply-k *k* *v*))]
      [(zero-continuation-k k^) (let* ((*k* k^)
                                       (*v* (zero? *v*)))
                                  (apply-k *k* *v*))]
      [(inner-sub1-k k^) (let* ((*k* k^)
                                (*v* (sub1 *v*)))
                                    (apply-k *k* *v*))]
      [(throw-outer-k k-exp env) (let* ((*k* (kt_throw-inner-k *v*))
                                        (*v* *v*)
                                        (*exp* k-exp)
                                        (*env* env))
                                   (value-of-cps *exp* *env* *k*))]
      [(throw-inner-k v2) (let* ((*k* *v*)
                                 (*v* v2))
                            (apply-k *k* *v*))]
      [(let-continuation-k body env k^) (let* ((*k* k^)
                                               (*v* *v*)
                                               (*exp* body)
                                               (*env* (envr_extend-env *v* env *k*)))
                                              (value-of-cps *exp* *env* *k*))]
      [(application-inner-k v1 k^) (let* ((*k* k^)
                                          (*v* *v*)
                                          (*arg* *v*)
                                          (*clos^* v1))
                                     (apply-closure *clos^* *arg* *k*))]
      [(application-outer-k rand env k^) (let* ((*k* (kt_application-inner-k *v* k^))
                                                (*v* *v*)
                                                (*exp* rand)
                                                (*env* env))
                                           (value-of-cps *exp* *env* *k*))]
      [(empty-k) *v*]
      )))

(define apply-closure
  (lambda (*clos^* *arg* *k*)
    (union-case *clos^* clos
      [(make-closure body env) (let* ((*env* (envr_extend-env *arg* env *k*))
                                      (*k* *k*)
                                      (*exp* body))
                                 (value-of-cps *exp* *env* *k*))]
      )))

(define apply-env
  (lambda (*env* *y* *k*)
    (union-case *env* envr
      [(extend-env arg^ env^ k^) (if (zero? *y*)
                                     (let* ((*v* arg^))
                                       (apply-k *k* *v*))
                                     (let* ((*env* env^)
                                            (*y* (sub1 *y*))
                                            (*k* *k*))
                                       (apply-env *env* *y* *k*)))]
      [(empty-env) (error 'value-of "unbound identifier")]
      )))

(define value-of-cps
  (lambda (*exp* env k)
    (union-case *exp* expr
      [(const *exp*) (apply-k k *exp*)]
      [(mult x1 x2) (value-of-cps x1 env (kt_outer-mult-k x2 env k))]
      [(sub1 x) (value-of-cps x env (kt_inner-sub1-k k))]
      [(zero x) (value-of-cps x env (kt_zero-continuation-k k))]
      [(if test conseq alt) (value-of-cps test env (kt_if-continuation-k conseq alt env k))]
      [(letcc body) (value-of-cps body (envr_extend-env k env k) k)]
      [(throw k-exp v-exp) (value-of-cps v-exp env (kt_throw-outer-k k-exp env))]
      [(let e body) (value-of-cps e env (kt_let-continuation-k body env k))]
      [(var y) (apply-env env y k)]
      [(lambda body) (apply-k k (clos_make-closure body env))]
      [(app rator rand) (value-of-cps rator env (kt_application-outer-k rand env k))]
      )))


(define main 
  (lambda ()
    (value-of-cps 
     (expr_let 
      (expr_lambda
       (expr_lambda 
        (expr_if
         (expr_zero (expr_var 0))
         (expr_const 1)
         (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
      (expr_mult
       (expr_letcc
        (expr_app
         (expr_app (expr_var 1) (expr_var 1))
         (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
       (expr_const 5)))
     (envr_empty-env)
     (kt_empty-k))))

|#
;Step 6
#|
(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union kt
  (zero-continuation-k k)
  (inner-mult-k v2 k^)
  (outer-mult-k x2 env k)
  (inner-sub1-k k^)
  (if-continuation-k conseq alt env k)
  (throw-inner-k v2)
  (throw-outer-k k-exp env)
  (let-continuation-k body env k^)
  (application-inner-k v1 k^)
  (application-outer-k rand env k^)
  (empty-k)
  )
(define-union clos
  (make-closure body env)
  )
(define-union envr
  (empty-env)
  (extend-env arg^ env^ k^))


(define apply-k
  (lambda (*k* *v*)
    (union-case *k* kt
      [(if-continuation-k conseq alt env k^) (if *v*
                                                 (let* ((*k* k^)
                                                        (*v* *v*)
                                                        (*exp* conseq)
                                                        (*env* env))
                                                   (value-of-cps *exp* *env* *k*))
                                                 (let* ((*k* k^)
                                                        (*v* *v*)
                                                        (*exp* alt)
                                                        (*env* env))
                                                 (value-of-cps *exp* *env* *k*)))]
      [(outer-mult-k x2 env k^) (let* ((*k* (kt_inner-mult-k *v* k^))
                                       (*v* *v*)
                                       (*exp* x2)
                                       (*env* env))
                                  (value-of-cps *exp* *env* *k*))]
      [(inner-mult-k v2 k^) (let* ((*k* k^)
                                   (*v* (* *v* v2)))
                              (apply-k *k* *v*))]
      [(zero-continuation-k k^) (let* ((*k* k^)
                                       (*v* (zero? *v*)))
                                  (apply-k *k* *v*))]
      [(inner-sub1-k k^) (let* ((*k* k^)
                                (*v* (sub1 *v*)))
                                    (apply-k *k* *v*))]
      [(throw-outer-k k-exp env) (let* ((*k* (kt_throw-inner-k *v*))
                                        (*v* *v*)
                                        (*exp* k-exp)
                                        (*env* env))
                                   (value-of-cps *exp* *env* *k*))]
      [(throw-inner-k v2) (let* ((*k* *v*)
                                 (*v* v2))
                            (apply-k *k* *v*))]
      [(let-continuation-k body env k^) (let* ((*k* k^)
                                               (*v* *v*)
                                               (*exp* body)
                                               (*env* (envr_extend-env *v* env *k*)))
                                              (value-of-cps *exp* *env* *k*))]
      [(application-inner-k v1 k^) (let* ((*k* k^)
                                          (*v* *v*)
                                          (*arg* *v*)
                                          (*clos^* v1))
                                     (apply-closure *clos^* *arg* *k*))]
      [(application-outer-k rand env k^) (let* ((*k* (kt_application-inner-k *v* k^))
                                                (*v* *v*)
                                                (*exp* rand)
                                                (*env* env))
                                           (value-of-cps *exp* *env* *k*))]
      [(empty-k) *v*]
      )))

(define apply-closure
  (lambda (*clos^* *arg* *k*)
    (union-case *clos^* clos
      [(make-closure body env) (let* ((*env* (envr_extend-env *arg* env *k*))
                                      (*k* *k*)
                                      (*exp* body))
                                 (value-of-cps *exp* *env* *k*))]
      )))

(define apply-env
  (lambda (*env* *y* *k*)
    (union-case *env* envr
      [(extend-env arg^ env^ k^) (if (zero? *y*)
                                     (let* ((*v* arg^))
                                       (apply-k *k* *v*))
                                     (let* ((*env* env^)
                                            (*y* (sub1 *y*))
                                            (*k* *k*))
                                       (apply-env *env* *y* *k*)))]
      [(empty-env) (error 'value-of "unbound identifier")]
      )))

(define value-of-cps
  (lambda (*exp* *env* *k*)
    (union-case *exp* expr
      [(const *exp*) (let* ((*k* *k*)
                            (*v* *exp*))
                       (apply-k *k* *v*))]
      [(mult x1 x2) (let* ((*exp* x1)
                           (*env* *env*)
                           (*k* (kt_outer-mult-k x2 *env* *k*)))
                           (value-of-cps *exp* *env* *k*))]
      [(sub1 x) (let* ((*k* (kt_inner-sub1-k *k*))
                       (*exp* x)
                       (*env* *env*))
                  (value-of-cps *exp* *env* *k*))]
      [(zero x) (let* ((*exp* x)
                       (*env* *env*)
                       (*k* (kt_zero-continuation-k *k*)))
                  (value-of-cps *exp* *env* *k*))]
      [(if test conseq alt) (let* ((*exp* test)
                                   (*env* *env*)
                                   (*k* (kt_if-continuation-k conseq alt *env* *k*)))
                              (value-of-cps *exp* *env* *k*))]
      [(letcc body) (let* ((*exp* body)
                           (*env* (envr_extend-env *k* *env* *k*))
                           (*k* *k*))
                      (value-of-cps *exp* *env* *k*))]
      [(throw k-exp v-exp) (let* ((*exp* v-exp)
                                  (*env* *env*)
                                  (*k* (kt_throw-outer-k k-exp *env*)))
                             (value-of-cps *exp* *env* *k*))]
      [(let e body) (let* ((*exp* e)
                           (*env* *env*)
                           (*k* (kt_let-continuation-k body *env* *k*)))
                      (value-of-cps *exp* *env* *k*))]
      [(var y) (let* ((*env* *env*)
                      (*y* y)
                      (*k* *k*))
                 (apply-env *env* *y* *k*))]
      [(lambda body) (let* ((*k* *k*)
                            (*v* (clos_make-closure body *env*)))
                       (apply-k *k* *v*))]
      [(app rator rand) (let* ((*exp* rator)
                               (*env* *env*)
                               (*k* (kt_application-outer-k rand *env* *k*)))
                          (value-of-cps *exp* *env* *k*))]
      )))

|#
;Step 6 - Registerizing
#|
(define-registers *exp* *env* *k* *clos^* *arg* *y* *v*)

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union kt
  (zero-continuation-k k)
  (inner-mult-k v2 k^)
  (outer-mult-k x2 env k)
  (inner-sub1-k k^)
  (if-continuation-k conseq alt env k)
  (throw-inner-k v2)
  (throw-outer-k k-exp env)
  (let-continuation-k body env k^)
  (application-inner-k v1 k^)
  (application-outer-k rand env k^)
  (empty-k)
  )
(define-union clos
  (make-closure body env)
  )
(define-union envr
  (empty-env)
  (extend-env arg^ env^ k^))


(define apply-k
  (lambda ()
    (union-case *k* kt
      [(if-continuation-k conseq alt env k^) (if *v*
                                                 (begin (set! *k* k^)
                                                        (set! *exp* conseq)
                                                        (set! *env* env)
                                                   (value-of-cps))
                                                 (begin (set! *k* k^)
                                                        (set! *exp* alt)
                                                        (set! *env* env)
                                                 (value-of-cps)))]
      [(outer-mult-k x2 env k^) (begin (set! *k* (kt_inner-mult-k *v* k^))
                                       (set! *exp* x2)
                                       (set! *env* env)
                                  (value-of-cps))]
      [(inner-mult-k v2 k^) (begin (set! *k* k^)
                                   (set! *v* (* *v* v2))
                              (apply-k))]
      [(zero-continuation-k k^) (begin (set! *k* k^)
                                       (set! *v* (zero? *v*))
                                  (apply-k))]
      [(inner-sub1-k k^) (begin (set! *k* k^)
                                (set! *v* (sub1 *v*))
                                    (apply-k))]
      [(throw-outer-k k-exp env) (begin (set! *k* (kt_throw-inner-k *v*))
                                        
                                        (set! *exp* k-exp)
                                        (set! *env* env)
                                   (value-of-cps))]
      [(throw-inner-k v2) (begin (set! *k* *v*)
                                 (set! *v* v2)
                            (apply-k))]
      [(let-continuation-k body env k^) (begin (set! *k* k^)
                                               
                                               (set! *exp* body)
                                               (set! *env* (envr_extend-env *v* env *k*))
                                              (value-of-cps))]
      [(application-inner-k v1 k^) (begin (set! *k* k^)
                                          (set! *clos^* v1)
                                          (set! *arg* *v*)
                                     (apply-closure))]
      [(application-outer-k rand env k^) (begin (set! *k* (kt_application-inner-k *v* k^))
                                                
                                                (set! *exp* rand)
                                                (set! *env* env)
                                           (value-of-cps))]
      [(empty-k) *v*]
      )))

(define apply-closure
  (lambda ()
    (union-case *clos^* clos
      [(make-closure body env) (begin (set! *env* (envr_extend-env *arg* env *k*))
                                      (set! *k* *k*)
                                      (set! *exp* body)
                                 (value-of-cps))]
      )))

(define apply-env
  (lambda ()
    (union-case *env* envr
      [(extend-env arg^ env^ k^) (if (zero? *y*)
                                     (begin (set! *v* arg^)
                                       (apply-k))
                                     (begin (set! *env* env^)
                                            (set! *y* (sub1 *y*))
                                            (set! *k* *k*)
                                       (apply-env)))]
      [(empty-env) (error 'value-of "unbound identifier")]
      )))

(define value-of-cps
  (lambda ()
    (union-case *exp* expr
      [(const e) (begin
                     (set! *k* *k*)
                     (set! *v* e)
                     (apply-k))]
      [(mult x1 x2) (begin (set! *exp* x1)
                           (set! *env* *env*)
                           (set! *k* (kt_outer-mult-k x2 *env* *k*))
                           (value-of-cps))]
      [(sub1 x) (begin (set! *k* (kt_inner-sub1-k *k*))
                       (set! *exp* x)
                       (set! *env* *env*)
                       (value-of-cps))]
      [(zero x) (begin (set! *exp* x)
                       (set! *env* *env*)
                       (set! *k* (kt_zero-continuation-k *k*))
                       (value-of-cps))]
      [(if test conseq alt) (begin (set! *exp* test)
                                   (set! *env* *env*)
                                   (set! *k* (kt_if-continuation-k conseq alt *env* *k*))
                              (value-of-cps))]
      [(letcc body) (begin (set! *exp* body)
                           (set! *env* (envr_extend-env *k* *env* *k*))
                           (set! *k* *k*)
                      (value-of-cps))]
      [(throw k-exp v-exp) (begin (set! *exp* v-exp)
                                  (set! *env* *env*)
                                  (set! *k* (kt_throw-outer-k k-exp *env*))
                                  (value-of-cps))]
      [(let e body) (begin (set! *exp* e)
                           (set! *env* *env*)
                           (set! *k* (kt_let-continuation-k body *env* *k*))
                      (value-of-cps))]
      [(var y) (begin (set! *env* *env*)
                      (set! *y* y)
                      (set! *k* *k*)
                 (apply-env))]
      [(lambda body) (begin (set! *k* *k*)
                            (set! *v* (clos_make-closure body *env*))
                       (apply-k))]
      [(app rator rand) (begin (set! *exp* rator)
                               (set! *env* *env*)
                               (set! *k* (kt_application-outer-k rand *env* *k*))
                          (value-of-cps))]
      )))

|#
;Step 7 - change define to define-label
#|
(define-registers *exp* *env* *k* *clos^* *arg* *y* *v*)
(define-program-counter pc)
(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union kt
  (zero-continuation-k k)
  (inner-mult-k v2 k^)
  (outer-mult-k x2 env k)
  (inner-sub1-k k^)
  (if-continuation-k conseq alt env k)
  (throw-inner-k v2)
  (throw-outer-k k-exp env)
  (let-continuation-k body env k^)
  (application-inner-k v1 k^)
  (application-outer-k rand env k^)
  (empty-k)
  )
(define-union clos
  (make-closure body env)
  )
(define-union envr
  (empty-env)
  (extend-env arg^ env^ k^))


(define-label apply-k
    (union-case *k* kt
      [(if-continuation-k conseq alt env k^) (if *v*
                                                 (begin (set! *k* k^)
                                                        (set! *exp* conseq)
                                                        (set! *env* env)
                                                   (value-of-cps))
                                                 (begin (set! *k* k^)
                                                        (set! *exp* alt)
                                                        (set! *env* env)
                                                 (value-of-cps)))]
      [(outer-mult-k x2 env k^) (begin (set! *k* (kt_inner-mult-k *v* k^))
                                       (set! *exp* x2)
                                       (set! *env* env)
                                  (value-of-cps))]
      [(inner-mult-k v2 k^) (begin (set! *k* k^)
                                   (set! *v* (* *v* v2))
                              (apply-k))]
      [(zero-continuation-k k^) (begin (set! *k* k^)
                                       (set! *v* (zero? *v*))
                                  (apply-k))]
      [(inner-sub1-k k^) (begin (set! *k* k^)
                                (set! *v* (sub1 *v*))
                                    (apply-k))]
      [(throw-outer-k k-exp env) (begin (set! *k* (kt_throw-inner-k *v*))
                                        
                                        (set! *exp* k-exp)
                                        (set! *env* env)
                                   (value-of-cps))]
      [(throw-inner-k v2) (begin (set! *k* *v*)
                                 (set! *v* v2)
                            (apply-k))]
      [(let-continuation-k body env k^) (begin (set! *k* k^)
                                               
                                               (set! *exp* body)
                                               (set! *env* (envr_extend-env *v* env *k*))
                                              (value-of-cps))]
      [(application-inner-k v1 k^) (begin (set! *k* k^)
                                          (set! *clos^* v1)
                                          (set! *arg* *v*)
                                     (apply-closure))]
      [(application-outer-k rand env k^) (begin (set! *k* (kt_application-inner-k *v* k^))
                                                
                                                (set! *exp* rand)
                                                (set! *env* env)
                                           (value-of-cps))]
      [(empty-k) *v*]
      ))

(define-label apply-closure
    (union-case *clos^* clos
      [(make-closure body env) (begin (set! *env* (envr_extend-env *arg* env *k*))
                                      (set! *k* *k*)
                                      (set! *exp* body)
                                 (value-of-cps))]
      ))

(define-label apply-env
    (union-case *env* envr
      [(extend-env arg^ env^ k^) (if (zero? *y*)
                                     (begin (set! *v* arg^)
                                       (apply-k))
                                     (begin (set! *env* env^)
                                            (set! *y* (sub1 *y*))
                                            (set! *k* *k*)
                                       (apply-env)))]
      [(empty-env) (error 'value-of "unbound identifier")]
      ))

(define-label value-of-cps
    (union-case *exp* expr
      [(const e) (begin
                     (set! *k* *k*)
                     (set! *v* e)
                     (apply-k))]
      [(mult x1 x2) (begin (set! *exp* x1)
                           (set! *env* *env*)
                           (set! *k* (kt_outer-mult-k x2 *env* *k*))
                           (value-of-cps))]
      [(sub1 x) (begin (set! *k* (kt_inner-sub1-k *k*))
                       (set! *exp* x)
                       (set! *env* *env*)
                       (value-of-cps))]
      [(zero x) (begin (set! *exp* x)
                       (set! *env* *env*)
                       (set! *k* (kt_zero-continuation-k *k*))
                       (value-of-cps))]
      [(if test conseq alt) (begin (set! *exp* test)
                                   (set! *env* *env*)
                                   (set! *k* (kt_if-continuation-k conseq alt *env* *k*))
                              (value-of-cps))]
      [(letcc body) (begin (set! *exp* body)
                           (set! *env* (envr_extend-env *k* *env* *k*))
                           (set! *k* *k*)
                      (value-of-cps))]
      [(throw k-exp v-exp) (begin (set! *exp* v-exp)
                                  (set! *env* *env*)
                                  (set! *k* (kt_throw-outer-k k-exp *env*))
                                  (value-of-cps))]
      [(let e body) (begin (set! *exp* e)
                           (set! *env* *env*)
                           (set! *k* (kt_let-continuation-k body *env* *k*))
                      (value-of-cps))]
      [(var y) (begin (set! *env* *env*)
                      (set! *y* y)
                      (set! *k* *k*)
                 (apply-env))]
      [(lambda body) (begin (set! *k* *k*)
                            (set! *v* (clos_make-closure body *env*))
                       (apply-k))]
      [(app rator rand) (begin (set! *exp* rator)
                               (set! *env* *env*)
                               (set! *k* (kt_application-outer-k rand *env* *k*))
                          (value-of-cps))]
      ))

|#
;Step 8 - invocations to assignments of program counter + calling mount-trampoline
(define-registers *exp* *env* *k* *clos^* *arg* *y* *v*)
(define-program-counter pc)

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union kt
  (zero-continuation-k k)
  (inner-mult-k v2 k^)
  (outer-mult-k x2 env k)
  (inner-sub1-k k^)
  (if-continuation-k conseq alt env k)
  (throw-inner-k v2)
  (throw-outer-k k-exp env)
  (let-continuation-k body env k^)
  (application-inner-k v1 k^)
  (application-outer-k rand env k^)
  (empty-k dismount)
  )
(define-union clos
  (make-closure body env)
  )
(define-union envr
  (empty-env)
  (extend-env arg^ env^ k^))


(define-label apply-k
    (union-case *k* kt
      [(if-continuation-k conseq alt env k^) (if *v*
                                                 (begin (set! *k* k^)
                                                        (set! *exp* conseq)
                                                        (set! *env* env)
                                                        (set! pc value-of-cps))
                                                 (begin (set! *k* k^)
                                                        (set! *exp* alt)
                                                        (set! *env* env)
                                                        (set! pc value-of-cps)))]
      [(outer-mult-k x2 env k^) (begin (set! *k* (kt_inner-mult-k *v* k^))
                                       (set! *exp* x2)
                                       (set! *env* env)
                                       (set! pc value-of-cps))]
      [(inner-mult-k v2 k^) (begin (set! *k* k^)
                                   (set! *v* (* *v* v2))
                                   (set! pc apply-k))]
      [(zero-continuation-k k^) (begin (set! *k* k^)
                                       (set! *v* (zero? *v*))
                                       (set! pc apply-k))]
      [(inner-sub1-k k^) (begin (set! *k* k^)
                                (set! *v* (sub1 *v*))
                                (set! pc apply-k))]
      [(throw-outer-k k-exp env) (begin (set! *k* (kt_throw-inner-k *v*))
                                        (set! *exp* k-exp)
                                        (set! *env* env)
                                        (set! pc value-of-cps))]
      [(throw-inner-k v2) (begin (set! *k* *v*)
                                 (set! *v* v2)
                                 (set! pc apply-k))]
      [(let-continuation-k body env k^) (begin (set! *k* k^)
                                               (set! *exp* body)
                                               (set! *env* (envr_extend-env *v* env *k*))
                                               (set! pc value-of-cps))]
      [(application-inner-k v1 k^) (begin (set! *k* k^)
                                          (set! *clos^* v1)
                                          (set! *arg* *v*)
                                          (set! pc apply-closure))]
      [(application-outer-k rand env k^) (begin (set! *k* (kt_application-inner-k *v* k^))
                                                (set! *exp* rand)
                                                (set! *env* env)
                                                (set! pc value-of-cps))]
      [(empty-k dismount) (dismount-trampoline dismount)]
      ))

(define-label apply-closure
    (union-case *clos^* clos
      [(make-closure body env) (begin (set! *env* (envr_extend-env *arg* env *k*))
                                      (set! *k* *k*)
                                      (set! *exp* body)
                                      (set! pc value-of-cps))]
      ))

(define-label apply-env
    (union-case *env* envr
      [(extend-env arg^ env^ k^) (if (zero? *y*)
                                     (begin (set! *v* arg^)
                                       (set! pc apply-k))
                                     (begin (set! *env* env^)
                                            (set! *y* (sub1 *y*))
                                            (set! *k* *k*)
                                            (set! pc apply-env)))]
      [(empty-env) (error 'value-of "unbound identifier")]
      ))

(define-label value-of-cps
    (union-case *exp* expr
      [(const e) (begin
                     (set! *k* *k*)
                     (set! *v* e)
                     (set! pc apply-k))]
      [(mult x1 x2) (begin (set! *exp* x1)
                           (set! *env* *env*)
                           (set! *k* (kt_outer-mult-k x2 *env* *k*))
                           (set! pc value-of-cps))]
      [(sub1 x) (begin (set! *k* (kt_inner-sub1-k *k*))
                       (set! *exp* x)
                       (set! *env* *env*)
                       (set! pc value-of-cps))]
      [(zero x) (begin (set! *exp* x)
                       (set! *env* *env*)
                       (set! *k* (kt_zero-continuation-k *k*))
                       (set! pc value-of-cps))]
      [(if test conseq alt) (begin (set! *exp* test)
                                   (set! *env* *env*)
                                   (set! *k* (kt_if-continuation-k conseq alt *env* *k*))
                              (set! pc value-of-cps))]
      [(letcc body) (begin (set! *exp* body)
                           (set! *env* (envr_extend-env *k* *env* *k*))
                           (set! *k* *k*)
                           (set! pc value-of-cps))]
      [(throw k-exp v-exp) (begin (set! *exp* v-exp)
                                  (set! *env* *env*)
                                  (set! *k* (kt_throw-outer-k k-exp *env*))
                                  (set! pc value-of-cps))]
      [(let e body) (begin (set! *exp* e)
                           (set! *env* *env*)
                           (set! *k* (kt_let-continuation-k body *env* *k*))
                           (set! pc value-of-cps))]
      [(var y) (begin (set! *env* *env*)
                      (set! *y* y)
                      (set! *k* *k*)
                      (set! pc apply-env))]
      [(lambda body) (begin (set! *k* *k*)
                            (set! *v* (clos_make-closure body *env*))
                            (set! pc apply-k))]
      [(app rator rand) (begin (set! *exp* rator)
                               (set! *env* *env*)
                               (set! *k* (kt_application-outer-k rand *env* *k*))
                               (set! pc value-of-cps))]
      ))


(define-label main 
    (begin (set! *exp* (expr_let 
                         (expr_lambda
                          (expr_lambda 
                           (expr_if
                            (expr_zero (expr_var 0))
                            (expr_const 1)
                            (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
                         (expr_mult
                          (expr_letcc
                           (expr_app
                            (expr_app (expr_var 1) (expr_var 1))
                            (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
                          (expr_const 5))))
            (set! *env* (envr_empty-env))
           (set! pc value-of-cps)
           (mount-trampoline kt_empty-k *k* pc)
           (printf "Factorial of 5: ~s\n" *v*)))

;(main)